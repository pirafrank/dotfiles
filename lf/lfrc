# lf file manager configuration file

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# set color256
set icons
set hidden
set number
set relativenumber

set incsearch
set tabstop 2
set smartcase

# Show number of files in dirs instead of single size
set dircounts
set info size

set sortby natural

# Set a previewer
set previewer ~/dotfiles/lf/preview
set preview

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

############
# commands #
############

# open vscode in current directory
cmd code ${{ code . & }}

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*)
            if [[ $f == *.md ]]; then
                #lf -remote "send $id \$$MARKDOWN_EDITOR \$fx"
                lf -remote "send $id \$$HOME/bin2/glow -p \$fx"
            else
                lf -remote "send $id \$$EDITOR \$fx"
            fi
            ;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    clear
    printf "Are you sure you want to delete\n\n'$f'?\n\n[y/n]\n"
    read response

    if [[ "$response" =~ ^[Yy]$ ]]; then
        rm -rf "$f"
        printf "$f removed.\n"
    else
        printf "Removal of '$f' canceled.\n"
    fi
}}

# force delete, as rm would do.
cmd remove %set -f; rm -rf $fx

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd mkdir %[ -n "${1}" ] && mkdir -p "$(echo ${@} | tr ' ' '\ ')" || echo "Argument needed"

cmd touch %[ -n "${1}" ] && touch "${@}" || echo "Argument needed"

# list mappings in this file
cmd mappings ${{
  set -f
  clear
  grep -E '^map' ~/dotfiles/lf/lfrc
  read -n 1 -s -r
}}

# list commands in this file
cmd commands ${{
  set -f
  clear
  grep -E '^cmd' ~/dotfiles/lf/lfrc
  read -n 1 -s -r
}}

cmd git ${{
  set -f
  clear
  git status -s
  read -n 1 -s -r
}}

cmd la ${{
  set -f
  clear
  git la
}}

cmd lg ${{
  set -f
  clear
  lazygit
}}

############
# mappings #
############

# shell commands
map e shell

# use enter to open files
map <enter> open

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# open current directory in 'vim' editor
map v $vim $f
map V push :!nvim<space>
# open current directory in 'nvim' editor
map n $nvim $f

# open current directory in 'code' editor
map c code

# execute current file (must be executable)
map x $$f
map X !$f

# show the result of execution of previous commands
map ` !true

# delete mappings
map d delete
map D remove
# unmap <delete>
map <delete>

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# rename, put cursor before extension
map i :rename

# copy full path to clipboard
map Y $printf "%s" "$fx" | xclip -selection clipboard

# fzf integration
map <c-f> $lf -remote "send $id select \"$(fzf)\""

