#compdef wasmer

autoload -U is-at-least

_wasmer() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-V[Print version info and exit]' \
'--version[Print version info and exit]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer_commands" \
"*::: :->wasmer" \
&& ret=0
    case $state in
    (wasmer)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[Change the current registry]:REGISTRY: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--no-browser[Variable to login without opening a browser]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::token -- The API token to use when communicating with the registry (inferred from the environment by default):' \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-auth-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[Change the current registry]:REGISTRY: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--no-browser[Variable to login without opening a browser]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::token -- The API token to use when communicating with the registry (inferred from the environment by default):' \
&& ret=0
;;
(logout)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--non-interactive[Do not prompt for user input]' \
'--revoke-token[Whether or not to revoke the associated token]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(whoami)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__auth__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-auth-help-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logout)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(whoami)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(publish)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--namespace=[Override the namespace of the package to upload]:PACKAGE_NAMESPACE: ' \
'--name=[Override the name of the package to upload]:PACKAGE_NAME: ' \
'--version=[Override the package version of the uploaded package in the wasmer.toml]:PACKAGE_VERSION: ' \
'--wait=[Wait for package to be available on the registry before exiting]' \
'--timeout=[Timeout (in seconds) for the publish query to the registry]:TIMEOUT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--dry-run[Run the publish logic without sending anything to the registry server]' \
'--quiet[Run the publish command without any output]' \
'--no-validate[Skip validation of the uploaded package]' \
'(--version)--bump[Whether or not the patch field of the version of the package - if any - should be bumped]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::path -- Directory containing the `wasmer.toml`, or a custom *.toml manifest file:_files' \
&& ret=0
;;
(cache)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__cache_commands" \
"*::: :->cache" \
&& ret=0

    case $state in
    (cache)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-cache-command-$line[1]:"
        case $line[1] in
            (clean)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(dir)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__cache__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-cache-help-command-$line[1]:"
        case $line[1] in
            (clean)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(dir)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(validate)
_arguments "${_arguments_options[@]}" \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- File to validate as WebAssembly:_files' \
&& ret=0
;;
(compile)
_arguments "${_arguments_options[@]}" \
'-o+[Output file]:OUTPUT PATH:_files' \
'--target=[Compilation Target triple]:TARGET_TRIPLE: ' \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'*-m+[]:CPU_FEATURES: ' \
'--hash-algorithm=[Hashing algorithm to be used for module hash]:HASH_ALGORITHM:((sha256\:"Sha256"
xx-hash\:"XXHash"))' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- Input file:_files' \
&& ret=0
;;
(create-exe)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-o+[Output file]:OUTPUT PATH:_files' \
'--debug-dir=[Optional directorey used for debugging\: if present, will output the zig command for reproducing issues in a debug directory]:DEBUG PATH:_files' \
'*--precompiled-atom=[Prefix for every input file, e.g. "wat2wasm\:sha256abc123" would prefix every function in the wat2wasm input object with the "sha256abc123" hash]:FILE:PREFIX:PATH: ' \
'--target=[Compilation Target triple]:TARGET_TRIPLE: ' \
'--use-wasmer-release=[Can specify either a release version (such as "3.0.1") or a URL to a tarball to use for linking. By default, create-exe will always pull the latest release tarball from GitHub, this flag can be used to override that behaviour]:URL_OR_RELEASE_VERSION: ' \
'*-m+[]:CPU_FEATURES: ' \
'*--cpu-features=[]:CPU_FEATURES: ' \
'*-l+[Additional libraries to link against. This is useful for fixing linker errors that may occur on some systems]:LIBRARIES: ' \
'*--libraries=[Additional libraries to link against. This is useful for fixing linker errors that may occur on some systems]:LIBRARIES: ' \
'--library-path=[Cross-compilation library path (path to libwasmer.a / wasmer.lib)]:LIBRARY_PATH:_files' \
'--tarball=[Cross-compilation tarball library path]:TARBALL:_files' \
'--zig-binary-path=[Specify \`zig\` binary path (defaults to \`zig\` in \$PATH if not present)]:ZIG_BINARY_PATH:_files' \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'--hash-algorithm=[Hashing algorithm to be used for module hash]:HASH_ALGORITHM:((sha256\:"Sha256"
xx-hash\:"XXHash"))' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--use-system-linker[Use the system linker instead of zig for linking]' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- Input file:_files' \
&& ret=0
;;
(create-obj)
_arguments "${_arguments_options[@]}" \
'-o+[Output file or directory if the input is a pirita file]:OUTPUT_PATH:_files' \
'--debug-dir=[Optional directorey used for debugging\: if present, will output the files to a debug instead of a temp directory]:DEBUG PATH:_files' \
'--prefix=[Prefix for the function names in the input file in the compiled object file]:PREFIX: ' \
'--atom=[Atom name to compile when compiling multi-atom pirita files]:ATOM: ' \
'--target=[Compilation Target triple]:TARGET_TRIPLE: ' \
'*-m+[]:CPU_FEATURES: ' \
'*--cpu-features=[]:CPU_FEATURES: ' \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- Input file:_files' \
&& ret=0
;;
(gen-c-header)
_arguments "${_arguments_options[@]}" \
'--prefix=[Prefix hash (default\: SHA256 of input .wasm file)]:PREFIX: ' \
'--atom=[For pirita files\: optional atom name to compile]:ATOM: ' \
'-o+[Output file]:OUTPUT PATH:_files' \
'--target=[Compilation Target triple]:TARGET_TRIPLE: ' \
'*-m+[]:CPU_FEATURES: ' \
'*--cpu-features=[]:CPU_FEATURES: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- Input file:_files' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--pkg-config)--prefix[Print the installation prefix]' \
'(--pkg-config)--bindir[Directory containing Wasmer executables]' \
'(--pkg-config)--includedir[Directory containing Wasmer headers]' \
'(--pkg-config)--libdir[Directory containing Wasmer libraries]' \
'(--pkg-config)--libs[Libraries needed to link against Wasmer components]' \
'(--pkg-config)--cflags[C compiler flags for files that include Wasmer headers]' \
'(--pkg-config)--config-path[Print the path to the wasmer configuration file where all settings are stored]' \
'--pkg-config[Outputs the necessary details for compiling and linking a program to Wasmer, using the \`pkg-config\` format]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__config__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-get-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__config__get__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-get-help-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(set)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__config__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-set-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':URL -- Url of the registry:' \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':TOKEN -- Token to set:' \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':ENABLED -- Whether to enable telemetry:' \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':ENABLED -- Whether to enable update notifications:' \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':URL -- Set if a proxy URL should be used (empty = unset proxy):' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__config__set__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-set-help-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__config__help__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-help-get-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(set)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__config__help__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-config-help-set-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(self-update)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- File to validate as WebAssembly:_files' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--namespace=[Namespace to init with, default = current logged in user or _]:NAMESPACE: ' \
'--package-name=[Package name to init with, default = Cargo.toml name or current directory name]:PACKAGE_NAME: ' \
'--version=[Version of the initialized package]:VERSION: ' \
'--manifest-path=[If the \`manifest-path\` is a Cargo.toml, use that file to initialize the wasmer.toml]:MANIFEST_PATH:_files' \
'--template=[Add default dependencies for common packages]:TEMPLATE:((python\:"Add dependency on Python"
js\:"Add dependency on JS"))' \
'*--include=[Include file paths into the target container filesystem]:INCLUDE: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--lib[Initialize wasmer.toml for a library package]' \
'--bin[Initialize wasmer.toml for a binary package]' \
'--empty[Initialize an empty wasmer.toml]' \
'--overwrite[Force overwriting the wasmer.toml, even if it already exists]' \
'--quiet[Don'\''t display debug output]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::PACKAGE_PATH -- Directory of the output file name. wasmer init will error if the target dir already contains a wasmer.toml. Also sets the package name:_files' \
&& ret=0
;;
(wast)
_arguments "${_arguments_options[@]}" \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'--hash-algorithm=[Hashing algorithm to be used for module hash]:HASH_ALGORITHM:((sha256\:"Sha256"
xx-hash\:"XXHash"))' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'-f[A flag to indicate wast stop at the first error or continue]' \
'--fail-fast[A flag to indicate wast stop at the first error or continue]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':FILE -- Wast file to run:_files' \
&& ret=0
;;
(binfmt)
_arguments "${_arguments_options[@]}" \
'--binfmt-misc=[Mount point of binfmt_misc fs]:BINFMT_MISC:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__binfmt_commands" \
"*::: :->binfmt" \
&& ret=0

    case $state in
    (binfmt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-binfmt-command-$line[1]:"
        case $line[1] in
            (register)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(unregister)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(reregister)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__binfmt__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-binfmt-help-command-$line[1]:"
        case $line[1] in
            (register)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(unregister)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(reregister)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(whoami)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(add)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--npm[Add the JavaScript bindings using "npm install"]' \
'--yarn[Add the JavaScript bindings using "yarn add"]' \
'--pnpm[Add the JavaScript bindings using "pnpm add"]' \
'--dev[Add the package as a dev-dependency]' \
'--pip[Add the Python bindings using "pip install"]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::packages -- The packages to add (e.g. "wasmer/wasmer-pack@0.5.0" or "python/python"):' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--llvm-debug-dir=[LLVM debug directory, where IR and object files will be written to]:LLVM_DEBUG_DIR:_files' \
'*--dir=[WASI pre-opened directory]:DIR:_files' \
'*--mapdir=[Map a host directory to a different location for the Wasm module]:GUEST_DIR:HOST_DIR: ' \
'*--env=[Pass custom environment variables]:KEY=VALUE: ' \
'*--use=[List of other containers this module depends on]:USE: ' \
'*--include-webc=[List of webc packages that are explicitly included for execution Note\: these packages will be used instead of those in the registry]:WEBC:_files' \
'*--map-command=[List of injected atoms]:MAPCMD: ' \
'--net=[Enable networking with the host network]' \
'--enable-cpu-backoff=[Enables an exponential backoff (measured in milli-seconds) of the process CPU usage when there are no active run tokens (when set holds the maximum amount of time that it will pause the CPU) (default = off)]:ENABLE_CPU_BACKOFF: ' \
'*--journal=[Specifies one or more journal files that Wasmer will use to restore and save the state of the WASM process as it executes]:JOURNALS:_files' \
'--with-compact-on-growth=[Tells the compactor to compact when it grows by a certain factor of its original size. (i.e. '\''0.2'\'' would be it compacts after the journal has grown by 20 percent)]:WITH_COMPACT_ON_GROWTH: ' \
'*--snapshot-on=[Indicates what events will cause a snapshot to be taken and written to the journal file]:SNAPSHOT_ON: ' \
'--snapshot-period=[Adds a periodic interval (measured in milli-seconds) that the runtime will automatically take snapshots of the running process and write them to the journal. When specifying this parameter it implies that \`--snapshot-on interval\` has also been specified]:SNAPSHOT_INTERVAL: ' \
'-a+[The address to serve on]:ADDR: ' \
'--addr=[The address to serve on]:ADDR: ' \
'--stack-size=[Set the default stack size (default is 1048576)]:STACK_SIZE: ' \
'-e+[The entrypoint module for webc packages]:ENTRYPOINT: ' \
'--entrypoint=[The entrypoint module for webc packages]:ENTRYPOINT: ' \
'-i+[The function to invoke]:INVOKE: ' \
'--invoke=[The function to invoke]:INVOKE: ' \
'--COREDUMP_PATH=[Generate a coredump at this path if a WebAssembly trap occurs]:COREDUMP_PATH:_files' \
'--hash-algorithm=[Hashing algorithm to be used for module hash]:HASH_ALGORITHM:((sha256\:"Sha256"
xx-hash\:"XXHash"))' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--cranelift --llvm)--singlepass[Use Singlepass compiler]' \
'(--singlepass --llvm)--cranelift[Use Cranelift compiler]' \
'(--singlepass --cranelift)--llvm[Use LLVM compiler]' \
'--enable-verifier[Enable compiler internal verification]' \
'--enable-simd[Enable support for the SIMD proposal]' \
'--disable-threads[Disable support for the threads proposal]' \
'--enable-threads[Deprecated, threads are enabled by default]' \
'--enable-reference-types[Enable support for the reference types proposal]' \
'--enable-multi-value[Enable support for the multi value proposal]' \
'--enable-bulk-memory[Enable support for the bulk memory proposal]' \
'--enable-all[Enable support for all pre-standard proposals]' \
'--forward-host-env[Forward all host env variables to guest]' \
'--no-tty[Disables the TTY bridge]' \
'--enable-async-threads[Enables asynchronous threading]' \
'--enable-compaction[Flag that indicates if the journal will be automatically compacted as it fills up and when the process exits]' \
'--without-compact-on-drop[Tells the compactor not to compact when the journal log file is closed]' \
'--http-client[Allow instances to send http requests]' \
'--deny-multiple-wasi-versions[Require WASI modules to only import 1 version of WASI]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':input -- The file, URL, or package to run:' \
'*::args -- Command-line arguments passed to the package:' \
&& ret=0
;;
(journal)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__journal_commands" \
"*::: :->journal" \
&& ret=0

    case $state in
    (journal)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-journal-command-$line[1]:"
        case $line[1] in
            (compact)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':journal_path -- Path to the journal that will be compacted:_files' \
&& ret=0
;;
(export)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':journal_path -- Path to the journal that will be printed:_files' \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':journal_path -- Path to the journal that will be printed:_files' \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':journal_path -- Path to the journal that will be printed:_files' \
&& ret=0
;;
(filter)
_arguments "${_arguments_options[@]}" \
'*-f+[Filters to be applied to the output journal, filter options are - '\''mem'\'' | '\''memory'\'' -> removes all WASM memory related events - '\''thread'\'' | '\''threads'\'' -> removes all events related to the state of the threads - '\''fs'\'' | '\''file'\'' -> removes file system mutation events - '\''core'\'' -> removes core operating system operations such as TTY - '\''snap'\'' | '\''snapshot'\'' -> removes the snapshots from the journal - '\''net'\'' | '\''network'\'' -> removes network socket and interface events]:FILTERS: ' \
'*--filter=[Filters to be applied to the output journal, filter options are - '\''mem'\'' | '\''memory'\'' -> removes all WASM memory related events - '\''thread'\'' | '\''threads'\'' -> removes all events related to the state of the threads - '\''fs'\'' | '\''file'\'' -> removes file system mutation events - '\''core'\'' -> removes core operating system operations such as TTY - '\''snap'\'' | '\''snapshot'\'' -> removes the snapshots from the journal - '\''net'\'' | '\''network'\'' -> removes network socket and interface events]:FILTERS: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':source_path -- Path to the journal that will be read:_files' \
':target_path -- Path to the journal that will be the output of the filter:_files' \
&& ret=0
;;
(extract)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':journal_path -- Path to the journal that will be compacted:_files' \
":: :_wasmer__journal__extract_commands" \
"*::: :->extract" \
&& ret=0

    case $state in
    (extract)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-journal-extract-command-$line[2]:"
        case $line[2] in
            (memory)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':memory_file_path -- Path to the memory file that will be updated using this journal:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__journal__extract__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-journal-extract-help-command-$line[1]:"
        case $line[1] in
            (memory)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__journal__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-journal-help-command-$line[1]:"
        case $line[1] in
            (compact)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(export)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(filter)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(extract)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__journal__help__extract_commands" \
"*::: :->extract" \
&& ret=0

    case $state in
    (extract)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-journal-help-extract-command-$line[1]:"
        case $line[1] in
            (memory)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(package)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__package_commands" \
"*::: :->package" \
&& ret=0

    case $state in
    (package)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-package-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-o+[Path where the package file should be written to. If not specified, the data will be written to stdout]:OUT_PATH:_files' \
'--out-path=[Path where the package file should be written to. If not specified, the data will be written to stdout]:OUT_PATH:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--validate[Verify that the downloaded file is a valid package]' \
'--quiet[Run the download command without any output]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':package -- The package to download:' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
'-o+[Output path for the package file. Defaults to current directory + \[name\]-\[version\].webc]:OUT:_files' \
'--out=[Output path for the package file. Defaults to current directory + \[name\]-\[version\].webc]:OUT:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Run the publish command without any output]' \
'--check[Only checks whether the package could be built successfully]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::package -- Path of the package or wasmer.toml manifest:_files' \
&& ret=0
;;
(tag)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--namespace=[Override the namespace of the package to upload]:PACKAGE_NAMESPACE: ' \
'--name=[Override the name of the package to upload]:PACKAGE_NAME: ' \
'--version=[Override the package version of the uploaded package in the wasmer.toml]:PACKAGE_VERSION: ' \
'--timeout=[Timeout (in seconds) for the publish query to the registry]:TIMEOUT: ' \
'--path=[Directory containing the \`wasmer.toml\`, or a custom *.toml manifest file]:PACKAGE_PATH:_files' \
'--wait=[Wait for package to be available on the registry before exiting]' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--dry-run[Run the publish logic without sending anything to the registry server]' \
'--quiet[Run the publish command without any output]' \
'(--version)--bump[Whether or not the patch field of the version of the package - if any - should be bumped]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':hash -- The hash of the package to tag:' \
'::package_ident -- The package to tag:' \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--namespace=[Override the namespace of the package to upload]:PACKAGE_NAMESPACE: ' \
'--name=[Override the name of the package to upload. If a name is specified, no version will be attached to the package]:PACKAGE_NAME: ' \
'--timeout=[Timeout (in seconds) for the publish query to the registry]:TIMEOUT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--dry-run[Run the publish logic without sending anything to the registry server]' \
'--quiet[Run the publish command without any output]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::path -- Directory containing the `wasmer.toml`, or a custom *.toml manifest file:_files' \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--namespace=[Override the namespace of the package to upload]:PACKAGE_NAMESPACE: ' \
'--name=[Override the name of the package to upload]:PACKAGE_NAME: ' \
'--version=[Override the package version of the uploaded package in the wasmer.toml]:PACKAGE_VERSION: ' \
'--wait=[Wait for package to be available on the registry before exiting]' \
'--timeout=[Timeout (in seconds) for the publish query to the registry]:TIMEOUT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--dry-run[Run the publish logic without sending anything to the registry server]' \
'--quiet[Run the publish command without any output]' \
'--no-validate[Skip validation of the uploaded package]' \
'(--version)--bump[Whether or not the patch field of the version of the package - if any - should be bumped]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::path -- Directory containing the `wasmer.toml`, or a custom *.toml manifest file:_files' \
&& ret=0
;;
(unpack)
_arguments "${_arguments_options[@]}" \
'-o+[The output directory]:OUT_DIR:_files' \
'--out-dir=[The output directory]:OUT_DIR:_files' \
'-f+[Output format]:FORMAT:((package\:"See \[\`PackageUnpack\:\:format\`\] for details"
webc\:"See \[\`PackageUnpack\:\:format\`\] for details"))' \
'--format=[Output format]:FORMAT:((package\:"See \[\`PackageUnpack\:\:format\`\] for details"
webc\:"See \[\`PackageUnpack\:\:format\`\] for details"))' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--overwrite[Overwrite existing directories/files]' \
'--quiet[Run the unpack command without any output]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':package_path -- Path to the package:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__package__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-package-help-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(tag)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(unpack)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(container)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__container_commands" \
"*::: :->container" \
&& ret=0

    case $state in
    (container)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-container-command-$line[1]:"
        case $line[1] in
            (unpack)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__container__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-container-help-command-$line[1]:"
        case $line[1] in
            (unpack)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(deploy)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--dir=[The path to the directory containing the \`app.yaml\` file]:DIR:_files' \
'(--dir)--path=[The path to the \`app.yaml\` file]:PATH:_files' \
'--owner=[Specify the owner (user or namespace) of the app]:OWNER: ' \
'--app-name=[Specify the name (user or namespace) of the app to be deployed]:name: ' \
'(--package --use-local-manifest)--template=[A reference to the template to use when creating an app to deploy]:TEMPLATE: ' \
'(--template --use-local-manifest)--package=[Name of the package to use when creating an app to deploy]:PACKAGE: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--no-validate[Skip local schema validation]' \
'--non-interactive[Do not prompt for user input]' \
'--publish-package[Automatically publish the package referenced by this app]' \
'--no-wait[Do not wait for the app to become reachable]' \
'--no-default[Do not make the new app version the default (active) version. This is useful for testing a deployment first, before moving it to "production"]' \
'--no-persist-id[Do not persist the app ID under \`app_id\` field in app.yaml]' \
'--bump[Whether or not to automatically bump the package version if publishing]' \
'--quiet[Don'\''t print any message]' \
'(--template --package)--use-local-manifest[Whether or not to search (and use) a local manifest when creating an app to deploy]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(app)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app_commands" \
"*::: :->app" \
&& ret=0

    case $state in
    (app)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-command-$line[1]:"
        case $line[1] in
            (deploy)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--dir=[The path to the directory containing the \`app.yaml\` file]:DIR:_files' \
'(--dir)--path=[The path to the \`app.yaml\` file]:PATH:_files' \
'--owner=[Specify the owner (user or namespace) of the app]:OWNER: ' \
'--app-name=[Specify the name (user or namespace) of the app to be deployed]:name: ' \
'(--package --use-local-manifest)--template=[A reference to the template to use when creating an app to deploy]:TEMPLATE: ' \
'(--template --use-local-manifest)--package=[Name of the package to use when creating an app to deploy]:PACKAGE: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--no-validate[Skip local schema validation]' \
'--non-interactive[Do not prompt for user input]' \
'--publish-package[Automatically publish the package referenced by this app]' \
'--no-wait[Do not wait for the app to become reachable]' \
'--no-default[Do not make the new app version the default (active) version. This is useful for testing a deployment first, before moving it to "production"]' \
'--no-persist-id[Do not persist the app ID under \`app_id\` field in app.yaml]' \
'--bump[Whether or not to automatically bump the package version if publishing]' \
'--quiet[Don'\''t print any message]' \
'(--template --package)--use-local-manifest[Whether or not to search (and use) a local manifest when creating an app to deploy]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'(--package --use-local-manifest)--template=[A reference to the template to use]:TEMPLATE: ' \
'(--template --use-local-manifest)--package=[Name of the package to use]:PACKAGE: ' \
'--owner=[The owner of the app]:OWNER: ' \
'--name=[The name of the app (can be changed later)]:APP_NAME: ' \
'--dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--new-package-name=[Name to use when creating a new package from a template]:NEW_PACKAGE_NAME: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(--template --package)--use-local-manifest[Whether or not to search (and use) a local manifest]' \
'--deploy[Whether or not to deploy the application once it is created]' \
'--no-validate[Skip local schema validation]' \
'--non-interactive[Do not prompt for user input]' \
'--offline[Do not interact with any APIs]' \
'--no-wait[Do not wait for the app to become reachable if deployed]' \
'--quiet[Don'\''t print any message]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-n+[Get apps in a specific namespace]:NAMESPACE: ' \
'--namespace=[Get apps in a specific namespace]:NAMESPACE: ' \
'--max=[Maximum number of apps to display]:MAX: ' \
'--sort=[Sort order for apps]:SORT:(newest oldest last-updated)' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-a[Get all apps that are accessible by the current user, including apps directly owned by the user and apps in namespaces the user can access]' \
'--all[Get all apps that are accessible by the current user, including apps directly owned by the user and apps in namespaces the user can access]' \
'--paging-mode[Asks whether to display the next page or not]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'(--request-id)--from=[The date of the earliest log entry]:FROM: ' \
'(--request-id)--until=[The date of the latest log entry]:UNTIL: ' \
'--max=[Maximum log lines to fetch. Defaults to 1000]:MAX: ' \
'*--streams=[Streams of logs to display]:STREAMS:(stdout stderr)' \
'--request-id=[The identifier of the request to show logs related to]:REQUEST_ID: ' \
'(--request-id)*--instance-id=[The identifier of the app instance to show logs related to]:INSTANCE_ID: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--watch[Continuously watch for new logs and display them in real-time]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(purge-cache)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--non-interactive[]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app__version_commands" \
"*::: :->version" \
&& ret=0

    case $state in
    (version)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-version-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--name=[*Name* of the version - NOT the unique version id!]:NAME: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--offset=[Pagination offset - get versions after this offset]:OFFSET: ' \
'--max=[Maximum number of items to return]:MAX: ' \
'--before=[Pagination cursor - get versions before this version]:BEFORE: ' \
'--after=[Pagination cursor - get versions after this version]:AFTER: ' \
'--sort=[]:SORT:(newest oldest)' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-a[Get all versions of the app. Overrides pagination flags (--max, --offset)]' \
'--all[Get all versions of the app. Overrides pagination flags (--max, --offset)]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(activate)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':version -- App version ID to activate:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__version__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-version-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(activate)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(secret)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app__secret_commands" \
"*::: :->secret" \
&& ret=0

    case $state in
    (secret)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-secret-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'(--app)--app-dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'--app=[Identifier of the application]:APP: ' \
'()--from-file=[Path to a file with secrets stored in JSON format to create secrets from]:from-file:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'--redeploy[Whether or not to redeploy the app after creating the secrets]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::name -- The name of the secret to create:' \
'::value -- The value of the secret to create:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--app=[Identifier of the application]:APP: ' \
'(--app)--app-dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'(--all)--from-file=[Path to a file with secrets stored in JSON format to delete secrets from]:from-file:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'()--all[Delete all the secrets related to an app]' \
'--force[Delete the secret(s) without asking for confirmation]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::name -- The name of the secret to delete:' \
&& ret=0
;;
(reveal)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--app=[Identifier of the application]:APP: ' \
'(--app)--app-dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'()--all[Reveal all the secrets related to an app]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::name -- The name of the secret to get the value of:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--app=[Identifier of the application]:APP: ' \
'(--app)--app-dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'(--app)--app-dir=[The path to the directory where the config file for the application will be written to]:APP_DIR_PATH:_files' \
'--app=[Identifier of the application]:APP: ' \
'()--from-file=[Path to a file with secrets stored in JSON format to update secrets from]:from-file:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'--redeploy[Whether or not to redeploy the app after creating the secrets]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::name -- The name of the secret to update:' \
'::value -- The value of the secret to update:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__secret__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-secret-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(reveal)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(region)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app__region_commands" \
"*::: :->region" \
&& ret=0

    case $state in
    (region)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-region-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'--quiet[Don'\''t print any message]' \
'--non-interactive[Do not prompt for user input]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__region__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-region-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(volume)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app__volume_commands" \
"*::: :->volume" \
&& ret=0

    case $state in
    (volume)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-volume-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format]:FORMAT:(json yaml table rclone)' \
'--format=[Output format]:FORMAT:(json yaml table rclone)' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(rotate-secrets)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-f+[Output format]:FORMAT:(json yaml table rclone)' \
'--format=[Output format]:FORMAT:(json yaml table rclone)' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__volume__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-volume-help-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rotate-secrets)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(deployment)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__app__deployment_commands" \
"*::: :->deployment" \
&& ret=0

    case $state in
    (deployment)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-deployment-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--offset=[]:OFFSET: ' \
'--limit=[]:LIMIT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::app -- Identifier of the application:' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':id -- ID of the deployment:' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':id -- ID of the deployment:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__deployment__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-deployment-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-command-$line[1]:"
        case $line[1] in
            (deploy)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(purge-cache)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help__version_commands" \
"*::: :->version" \
&& ret=0

    case $state in
    (version)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-version-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(activate)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(secret)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help__secret_commands" \
"*::: :->secret" \
&& ret=0

    case $state in
    (secret)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-secret-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(reveal)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(region)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help__region_commands" \
"*::: :->region" \
&& ret=0

    case $state in
    (region)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-region-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(volume)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help__volume_commands" \
"*::: :->volume" \
&& ret=0

    case $state in
    (volume)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-volume-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rotate-secrets)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(deployment)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__app__help__deployment_commands" \
"*::: :->deployment" \
&& ret=0

    case $state in
    (deployment)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-app-help-deployment-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(ssh)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--ssh-port=[SSH port to use]:SSH_PORT: ' \
'--host=[SSH Host]:HOST: ' \
'*--map-port=[Local port mapping to the package that'\''s running, this allows for instance a HTTP server to be tested remotely while giving instant logs over stderr channelled via SSH]:MAP_PORT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-p[Prints the SSH command rather than executing it]' \
'--print[Prints the SSH command rather than executing it]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::run -- Package to run on the Deploy servers:' \
'*::run_args -- Arguments to pass the package running on Deploy:' \
&& ret=0
;;
(namespace)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__namespace_commands" \
"*::: :->namespace" \
&& ret=0

    case $state in
    (namespace)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-namespace-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':name -- Name of the namespace:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__namespace__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-namespace-help-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(domain)
_arguments "${_arguments_options[@]}" \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_wasmer__domain_commands" \
"*::: :->domain" \
&& ret=0

    case $state in
    (domain)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-domain-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table, item-table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::namespace -- Name of the namespace:' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':name -- Name of the domain:' \
&& ret=0
;;
(get-zone-file)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-o+[output file name to store zone file]:ZONE_FILE_PATH: ' \
'--output=[output file name to store zone file]:ZONE_FILE_PATH: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':domain_name -- Name of the domain:' \
&& ret=0
;;
(sync-zone-file)
_arguments "${_arguments_options[@]}" \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-n[Do not delete records that are not present in the zone file]' \
'--no-delete-missing-records[Do not delete records that are not present in the zone file]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':zone_file_path -- filename of  zone-file to sync:' \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" \
'-f+[Output format. (yaml, json, table)]:FORMAT: ' \
'--format=[Output format. (yaml, json, table)]:FORMAT: ' \
'--wasmer-dir=[Set Wasmer'\''s home directory]:WASMER_DIR:_files' \
'--cache-dir=[The directory cached artefacts are saved to]:CACHE_DIR:_files' \
'--registry=[The registry to fetch packages from (inferred from the environment by default)]:REGISTRY: ' \
'--token=[The API token to use when communicating with the registry (inferred from the environment by default)]:TOKEN: ' \
'-n+[owner under which the domain will live]:NAMESPACE: ' \
'--namespace=[owner under which the domain will live]:NAMESPACE: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'-i[auto update DNS records for this domain]' \
'--import-records[auto update DNS records for this domain]' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':name -- Name of the domain:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__domain__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-domain-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get-zone-file)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sync-zone-file)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(gen-completions)
_arguments "${_arguments_options[@]}" \
'--out=[Where to store the generated file(s) to. Defaults to stdout]:OUT: ' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':shell -- The shell to generate the autocompletions script for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(gen-man)
_arguments "${_arguments_options[@]}" \
'--out=[Where to store the generated file(s) to]:OUT:_files' \
'--log-format=[The format to use when generating logs]:LOG_FORMAT:((text\:"Human-readable logs"
json\:"Machine-readable logs"))' \
'--color=[When to display colored output]:COLOR:(auto always never)' \
'(-q --quiet)*-v[Generate verbose output (repeat for more verbosity)]' \
'(-q --quiet)*--verbose[Generate verbose output (repeat for more verbosity)]' \
'(-v --verbose)-q[Do not print progress messages]' \
'(-v --verbose)--quiet[Do not print progress messages]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__auth_commands" \
"*::: :->auth" \
&& ret=0

    case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-auth-command-$line[1]:"
        case $line[1] in
            (login)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logout)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(whoami)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(publish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(cache)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__cache_commands" \
"*::: :->cache" \
&& ret=0

    case $state in
    (cache)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-cache-command-$line[1]:"
        case $line[1] in
            (clean)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(dir)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(validate)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(compile)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create-exe)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create-obj)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(gen-c-header)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-config-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__config__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-config-get-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(set)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__config__set_commands" \
"*::: :->set" \
&& ret=0

    case $state in
    (set)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-config-set-command-$line[1]:"
        case $line[1] in
            (registry.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(registry.token)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(telemetry.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update-notifications.enabled)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(proxy.url)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(self-update)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(wast)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(binfmt)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__binfmt_commands" \
"*::: :->binfmt" \
&& ret=0

    case $state in
    (binfmt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-binfmt-command-$line[1]:"
        case $line[1] in
            (register)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(unregister)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(reregister)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(whoami)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(add)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(journal)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__journal_commands" \
"*::: :->journal" \
&& ret=0

    case $state in
    (journal)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-journal-command-$line[1]:"
        case $line[1] in
            (compact)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(export)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(import)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(filter)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(extract)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__journal__extract_commands" \
"*::: :->extract" \
&& ret=0

    case $state in
    (extract)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-journal-extract-command-$line[1]:"
        case $line[1] in
            (memory)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(package)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__package_commands" \
"*::: :->package" \
&& ret=0

    case $state in
    (package)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-package-command-$line[1]:"
        case $line[1] in
            (download)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(tag)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(push)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(unpack)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(container)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__container_commands" \
"*::: :->container" \
&& ret=0

    case $state in
    (container)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-container-command-$line[1]:"
        case $line[1] in
            (unpack)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(deploy)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(app)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app_commands" \
"*::: :->app" \
&& ret=0

    case $state in
    (app)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-command-$line[1]:"
        case $line[1] in
            (deploy)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(info)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(purge-cache)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app__version_commands" \
"*::: :->version" \
&& ret=0

    case $state in
    (version)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-version-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(activate)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(secret)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app__secret_commands" \
"*::: :->secret" \
&& ret=0

    case $state in
    (secret)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-secret-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(reveal)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(region)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app__region_commands" \
"*::: :->region" \
&& ret=0

    case $state in
    (region)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-region-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(volume)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app__volume_commands" \
"*::: :->volume" \
&& ret=0

    case $state in
    (volume)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-volume-command-$line[1]:"
        case $line[1] in
            (credentials)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rotate-secrets)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(deployment)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__app__deployment_commands" \
"*::: :->deployment" \
&& ret=0

    case $state in
    (deployment)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-app-deployment-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(ssh)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(namespace)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__namespace_commands" \
"*::: :->namespace" \
&& ret=0

    case $state in
    (namespace)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-namespace-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(domain)
_arguments "${_arguments_options[@]}" \
":: :_wasmer__help__domain_commands" \
"*::: :->domain" \
&& ret=0

    case $state in
    (domain)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wasmer-help-domain-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(get-zone-file)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(sync-zone-file)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(register)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(gen-completions)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(gen-man)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_wasmer_commands] )) ||
_wasmer_commands() {
    local commands; commands=(
'login:Login into a wasmer.io-like registry' \
'auth:Manage your ' \
'publish:Publish a package to a registry \[alias\: package publish\]' \
'cache:Manage the local Wasmer cache' \
'validate:Validate a WebAssembly binary' \
'compile:Compile a WebAssembly binary' \
'create-exe:Compile a WebAssembly binary into a native executable' \
'create-obj:Compile a WebAssembly binary into an object file' \
'gen-c-header:Generate the C static_defs.h header file for the input .wasm module' \
'config:Get various configuration information needed to compile programs which use Wasmer' \
'self-update:Update wasmer to the latest version' \
'inspect:Inspect a WebAssembly file' \
'init:Initializes a new wasmer.toml file' \
'wast:Run spec testsuite' \
'binfmt:Unregister and/or register wasmer as binfmt interpreter' \
'whoami:Shows the current logged in user for the current active registry' \
'add:Add a Wasmer package'\''s bindings to your application' \
'run:Run a WebAssembly file or Wasmer container' \
'journal:Manage journals (compacting, inspecting, filtering, ...)' \
'package:Package related commands' \
'container:Container related commands. (inspecting, unpacking, ...)' \
'deploy:Deploy apps to Wasmer Edge \[alias\: app deploy\]' \
'app:Create and manage Wasmer Edge apps' \
'ssh:Run commands/packages on Wasmer Edge in an interactive shell session' \
'namespace:Manage Wasmer namespaces' \
'domain:Manage DNS records' \
'gen-completions:Generate autocompletion for different shells' \
'gen-man:Generate man pages' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer commands' commands "$@"
}
(( $+functions[_wasmer__app__help__version__activate_commands] )) ||
_wasmer__app__help__version__activate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help version activate commands' commands "$@"
}
(( $+functions[_wasmer__app__version__activate_commands] )) ||
_wasmer__app__version__activate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version activate commands' commands "$@"
}
(( $+functions[_wasmer__app__version__help__activate_commands] )) ||
_wasmer__app__version__help__activate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version help activate commands' commands "$@"
}
(( $+functions[_wasmer__help__app__version__activate_commands] )) ||
_wasmer__help__app__version__activate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app version activate commands' commands "$@"
}
(( $+functions[_wasmer__add_commands] )) ||
_wasmer__add_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer add commands' commands "$@"
}
(( $+functions[_wasmer__help__add_commands] )) ||
_wasmer__help__add_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help add commands' commands "$@"
}
(( $+functions[_wasmer__app_commands] )) ||
_wasmer__app_commands() {
    local commands; commands=(
'deploy:Deploy an app to Wasmer Edge' \
'create:Create a new Edge app' \
'get:Retrieve detailed informations about an app' \
'info:Show short information about an Edge app' \
'list:List apps belonging to a namespace' \
'logs:Retrieve the logs of an app' \
'purge-cache:Purge caches for applications' \
'delete:Delete an existing Edge app' \
'version:Manage app versions' \
'secret:Manage and reveal secrets related to Edge apps' \
'region:Informations about available Edge regioins' \
'volume:App volume management' \
'deployment:App volume management' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app commands' commands "$@"
}
(( $+functions[_wasmer__help__app_commands] )) ||
_wasmer__help__app_commands() {
    local commands; commands=(
'deploy:Deploy an app to Wasmer Edge' \
'create:Create a new Edge app' \
'get:Retrieve detailed informations about an app' \
'info:Show short information about an Edge app' \
'list:List apps belonging to a namespace' \
'logs:Retrieve the logs of an app' \
'purge-cache:Purge caches for applications' \
'delete:Delete an existing Edge app' \
'version:Manage app versions' \
'secret:Manage and reveal secrets related to Edge apps' \
'region:Informations about available Edge regioins' \
'volume:App volume management' \
'deployment:App volume management' \
    )
    _describe -t commands 'wasmer help app commands' commands "$@"
}
(( $+functions[_wasmer__auth_commands] )) ||
_wasmer__auth_commands() {
    local commands; commands=(
'login:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'logout:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'whoami:The options for the \`wasmer whoami\` subcommand' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer auth commands' commands "$@"
}
(( $+functions[_wasmer__help__auth_commands] )) ||
_wasmer__help__auth_commands() {
    local commands; commands=(
'login:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'logout:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'whoami:The options for the \`wasmer whoami\` subcommand' \
    )
    _describe -t commands 'wasmer help auth commands' commands "$@"
}
(( $+functions[_wasmer__binfmt_commands] )) ||
_wasmer__binfmt_commands() {
    local commands; commands=(
'register:Register wasmer as binfmt interpreter' \
'unregister:Unregister a binfmt interpreter for wasm32' \
'reregister:Soft unregister, and register' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer binfmt commands' commands "$@"
}
(( $+functions[_wasmer__help__binfmt_commands] )) ||
_wasmer__help__binfmt_commands() {
    local commands; commands=(
'register:Register wasmer as binfmt interpreter' \
'unregister:Unregister a binfmt interpreter for wasm32' \
'reregister:Soft unregister, and register' \
    )
    _describe -t commands 'wasmer help binfmt commands' commands "$@"
}
(( $+functions[_wasmer__help__package__build_commands] )) ||
_wasmer__help__package__build_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package build commands' commands "$@"
}
(( $+functions[_wasmer__package__build_commands] )) ||
_wasmer__package__build_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package build commands' commands "$@"
}
(( $+functions[_wasmer__package__help__build_commands] )) ||
_wasmer__package__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help build commands' commands "$@"
}
(( $+functions[_wasmer__cache_commands] )) ||
_wasmer__cache_commands() {
    local commands; commands=(
'clean:Clear the cache' \
'dir:Display the location of the cache' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer cache commands' commands "$@"
}
(( $+functions[_wasmer__help__cache_commands] )) ||
_wasmer__help__cache_commands() {
    local commands; commands=(
'clean:Clear the cache' \
'dir:Display the location of the cache' \
    )
    _describe -t commands 'wasmer help cache commands' commands "$@"
}
(( $+functions[_wasmer__cache__clean_commands] )) ||
_wasmer__cache__clean_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer cache clean commands' commands "$@"
}
(( $+functions[_wasmer__cache__help__clean_commands] )) ||
_wasmer__cache__help__clean_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer cache help clean commands' commands "$@"
}
(( $+functions[_wasmer__help__cache__clean_commands] )) ||
_wasmer__help__cache__clean_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help cache clean commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__compact_commands] )) ||
_wasmer__help__journal__compact_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal compact commands' commands "$@"
}
(( $+functions[_wasmer__journal__compact_commands] )) ||
_wasmer__journal__compact_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal compact commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__compact_commands] )) ||
_wasmer__journal__help__compact_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help compact commands' commands "$@"
}
(( $+functions[_wasmer__compile_commands] )) ||
_wasmer__compile_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer compile commands' commands "$@"
}
(( $+functions[_wasmer__help__compile_commands] )) ||
_wasmer__help__compile_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help compile commands' commands "$@"
}
(( $+functions[_wasmer__config_commands] )) ||
_wasmer__config_commands() {
    local commands; commands=(
'get:\`wasmer config get \$KEY\`' \
'set:\`wasmer config set \$KEY \$VALUE\`' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config commands' commands "$@"
}
(( $+functions[_wasmer__help__config_commands] )) ||
_wasmer__help__config_commands() {
    local commands; commands=(
'get:\`wasmer config get \$KEY\`' \
'set:\`wasmer config set \$KEY \$VALUE\`' \
    )
    _describe -t commands 'wasmer help config commands' commands "$@"
}
(( $+functions[_wasmer__container_commands] )) ||
_wasmer__container_commands() {
    local commands; commands=(
'unpack:RENAMED\: the '\''container unpack'\'' command has been renamed to '\''package unpack'\''!' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer container commands' commands "$@"
}
(( $+functions[_wasmer__help__container_commands] )) ||
_wasmer__help__container_commands() {
    local commands; commands=(
'unpack:RENAMED\: the '\''container unpack'\'' command has been renamed to '\''package unpack'\''!' \
    )
    _describe -t commands 'wasmer help container commands' commands "$@"
}
(( $+functions[_wasmer__app__create_commands] )) ||
_wasmer__app__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app create commands' commands "$@"
}
(( $+functions[_wasmer__app__help__create_commands] )) ||
_wasmer__app__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help create commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret__create_commands] )) ||
_wasmer__app__help__secret__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help secret create commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__create_commands] )) ||
_wasmer__app__secret__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret create commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__create_commands] )) ||
_wasmer__app__secret__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help create commands' commands "$@"
}
(( $+functions[_wasmer__help__app__create_commands] )) ||
_wasmer__help__app__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app create commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret__create_commands] )) ||
_wasmer__help__app__secret__create_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app secret create commands' commands "$@"
}
(( $+functions[_wasmer__create-exe_commands] )) ||
_wasmer__create-exe_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer create-exe commands' commands "$@"
}
(( $+functions[_wasmer__help__create-exe_commands] )) ||
_wasmer__help__create-exe_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help create-exe commands' commands "$@"
}
(( $+functions[_wasmer__create-obj_commands] )) ||
_wasmer__create-obj_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer create-obj commands' commands "$@"
}
(( $+functions[_wasmer__help__create-obj_commands] )) ||
_wasmer__help__create-obj_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help create-obj commands' commands "$@"
}
(( $+functions[_wasmer__app__help__volume__credentials_commands] )) ||
_wasmer__app__help__volume__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help volume credentials commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__credentials_commands] )) ||
_wasmer__app__volume__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume credentials commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__help__credentials_commands] )) ||
_wasmer__app__volume__help__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume help credentials commands' commands "$@"
}
(( $+functions[_wasmer__help__app__volume__credentials_commands] )) ||
_wasmer__help__app__volume__credentials_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app volume credentials commands' commands "$@"
}
(( $+functions[_wasmer__app__delete_commands] )) ||
_wasmer__app__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app delete commands' commands "$@"
}
(( $+functions[_wasmer__app__help__delete_commands] )) ||
_wasmer__app__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help delete commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret__delete_commands] )) ||
_wasmer__app__help__secret__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help secret delete commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__delete_commands] )) ||
_wasmer__app__secret__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret delete commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__delete_commands] )) ||
_wasmer__app__secret__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help delete commands' commands "$@"
}
(( $+functions[_wasmer__help__app__delete_commands] )) ||
_wasmer__help__app__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app delete commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret__delete_commands] )) ||
_wasmer__help__app__secret__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app secret delete commands' commands "$@"
}
(( $+functions[_wasmer__app__deploy_commands] )) ||
_wasmer__app__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deploy commands' commands "$@"
}
(( $+functions[_wasmer__app__help__deploy_commands] )) ||
_wasmer__app__help__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help deploy commands' commands "$@"
}
(( $+functions[_wasmer__deploy_commands] )) ||
_wasmer__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer deploy commands' commands "$@"
}
(( $+functions[_wasmer__help__app__deploy_commands] )) ||
_wasmer__help__app__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app deploy commands' commands "$@"
}
(( $+functions[_wasmer__help__deploy_commands] )) ||
_wasmer__help__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help deploy commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment_commands] )) ||
_wasmer__app__deployment_commands() {
    local commands; commands=(
'list:List the volumes of an app' \
'get:Get the volumes of an app' \
'logs:Get logs for an app deployment' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app deployment commands' commands "$@"
}
(( $+functions[_wasmer__app__help__deployment_commands] )) ||
_wasmer__app__help__deployment_commands() {
    local commands; commands=(
'list:List the volumes of an app' \
'get:Get the volumes of an app' \
'logs:Get logs for an app deployment' \
    )
    _describe -t commands 'wasmer app help deployment commands' commands "$@"
}
(( $+functions[_wasmer__help__app__deployment_commands] )) ||
_wasmer__help__app__deployment_commands() {
    local commands; commands=(
'list:List the volumes of an app' \
'get:Get the volumes of an app' \
'logs:Get logs for an app deployment' \
    )
    _describe -t commands 'wasmer help app deployment commands' commands "$@"
}
(( $+functions[_wasmer__cache__dir_commands] )) ||
_wasmer__cache__dir_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer cache dir commands' commands "$@"
}
(( $+functions[_wasmer__cache__help__dir_commands] )) ||
_wasmer__cache__help__dir_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer cache help dir commands' commands "$@"
}
(( $+functions[_wasmer__help__cache__dir_commands] )) ||
_wasmer__help__cache__dir_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help cache dir commands' commands "$@"
}
(( $+functions[_wasmer__domain_commands] )) ||
_wasmer__domain_commands() {
    local commands; commands=(
'list:List domains' \
'get:Get a domain' \
'get-zone-file:Get zone file for a domain' \
'sync-zone-file:Sync local zone file with remotex' \
'register:Register new domain' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer domain commands' commands "$@"
}
(( $+functions[_wasmer__help__domain_commands] )) ||
_wasmer__help__domain_commands() {
    local commands; commands=(
'list:List domains' \
'get:Get a domain' \
'get-zone-file:Get zone file for a domain' \
'sync-zone-file:Sync local zone file with remotex' \
'register:Register new domain' \
    )
    _describe -t commands 'wasmer help domain commands' commands "$@"
}
(( $+functions[_wasmer__help__package__download_commands] )) ||
_wasmer__help__package__download_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package download commands' commands "$@"
}
(( $+functions[_wasmer__package__download_commands] )) ||
_wasmer__package__download_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package download commands' commands "$@"
}
(( $+functions[_wasmer__package__help__download_commands] )) ||
_wasmer__package__help__download_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help download commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__export_commands] )) ||
_wasmer__help__journal__export_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal export commands' commands "$@"
}
(( $+functions[_wasmer__journal__export_commands] )) ||
_wasmer__journal__export_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal export commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__export_commands] )) ||
_wasmer__journal__help__export_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help export commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__extract_commands] )) ||
_wasmer__help__journal__extract_commands() {
    local commands; commands=(
'memory:' \
    )
    _describe -t commands 'wasmer help journal extract commands' commands "$@"
}
(( $+functions[_wasmer__journal__extract_commands] )) ||
_wasmer__journal__extract_commands() {
    local commands; commands=(
'memory:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer journal extract commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__extract_commands] )) ||
_wasmer__journal__help__extract_commands() {
    local commands; commands=(
'memory:' \
    )
    _describe -t commands 'wasmer journal help extract commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__filter_commands] )) ||
_wasmer__help__journal__filter_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal filter commands' commands "$@"
}
(( $+functions[_wasmer__journal__filter_commands] )) ||
_wasmer__journal__filter_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal filter commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__filter_commands] )) ||
_wasmer__journal__help__filter_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help filter commands' commands "$@"
}
(( $+functions[_wasmer__gen-c-header_commands] )) ||
_wasmer__gen-c-header_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer gen-c-header commands' commands "$@"
}
(( $+functions[_wasmer__help__gen-c-header_commands] )) ||
_wasmer__help__gen-c-header_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help gen-c-header commands' commands "$@"
}
(( $+functions[_wasmer__gen-completions_commands] )) ||
_wasmer__gen-completions_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer gen-completions commands' commands "$@"
}
(( $+functions[_wasmer__help__gen-completions_commands] )) ||
_wasmer__help__gen-completions_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help gen-completions commands' commands "$@"
}
(( $+functions[_wasmer__gen-man_commands] )) ||
_wasmer__gen-man_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer gen-man commands' commands "$@"
}
(( $+functions[_wasmer__help__gen-man_commands] )) ||
_wasmer__help__gen-man_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help gen-man commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__get_commands] )) ||
_wasmer__app__deployment__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment get commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__help__get_commands] )) ||
_wasmer__app__deployment__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment help get commands' commands "$@"
}
(( $+functions[_wasmer__app__get_commands] )) ||
_wasmer__app__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app get commands' commands "$@"
}
(( $+functions[_wasmer__app__help__deployment__get_commands] )) ||
_wasmer__app__help__deployment__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help deployment get commands' commands "$@"
}
(( $+functions[_wasmer__app__help__get_commands] )) ||
_wasmer__app__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help get commands' commands "$@"
}
(( $+functions[_wasmer__app__help__version__get_commands] )) ||
_wasmer__app__help__version__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help version get commands' commands "$@"
}
(( $+functions[_wasmer__app__version__get_commands] )) ||
_wasmer__app__version__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version get commands' commands "$@"
}
(( $+functions[_wasmer__app__version__help__get_commands] )) ||
_wasmer__app__version__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version help get commands' commands "$@"
}
(( $+functions[_wasmer__config__get_commands] )) ||
_wasmer__config__get_commands() {
    local commands; commands=(
'registry.url:Print the registry URL of the currently active registry' \
'registry.token:Print the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Print whether telemetry is currently enabled' \
'update-notifications.enabled:Print whether update notifications are enabled' \
'proxy.url:Print the proxy URL' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config get commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get_commands] )) ||
_wasmer__config__help__get_commands() {
    local commands; commands=(
'registry.url:Print the registry URL of the currently active registry' \
'registry.token:Print the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Print whether telemetry is currently enabled' \
'update-notifications.enabled:Print whether update notifications are enabled' \
'proxy.url:Print the proxy URL' \
    )
    _describe -t commands 'wasmer config help get commands' commands "$@"
}
(( $+functions[_wasmer__domain__get_commands] )) ||
_wasmer__domain__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain get commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__get_commands] )) ||
_wasmer__domain__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help get commands' commands "$@"
}
(( $+functions[_wasmer__help__app__deployment__get_commands] )) ||
_wasmer__help__app__deployment__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app deployment get commands' commands "$@"
}
(( $+functions[_wasmer__help__app__get_commands] )) ||
_wasmer__help__app__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app get commands' commands "$@"
}
(( $+functions[_wasmer__help__app__version__get_commands] )) ||
_wasmer__help__app__version__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app version get commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get_commands] )) ||
_wasmer__help__config__get_commands() {
    local commands; commands=(
'registry.url:Print the registry URL of the currently active registry' \
'registry.token:Print the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Print whether telemetry is currently enabled' \
'update-notifications.enabled:Print whether update notifications are enabled' \
'proxy.url:Print the proxy URL' \
    )
    _describe -t commands 'wasmer help config get commands' commands "$@"
}
(( $+functions[_wasmer__help__domain__get_commands] )) ||
_wasmer__help__domain__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help domain get commands' commands "$@"
}
(( $+functions[_wasmer__help__namespace__get_commands] )) ||
_wasmer__help__namespace__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help namespace get commands' commands "$@"
}
(( $+functions[_wasmer__namespace__get_commands] )) ||
_wasmer__namespace__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer namespace get commands' commands "$@"
}
(( $+functions[_wasmer__namespace__help__get_commands] )) ||
_wasmer__namespace__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer namespace help get commands' commands "$@"
}
(( $+functions[_wasmer__domain__get-zone-file_commands] )) ||
_wasmer__domain__get-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain get-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__get-zone-file_commands] )) ||
_wasmer__domain__help__get-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help get-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__help__domain__get-zone-file_commands] )) ||
_wasmer__help__domain__get-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help domain get-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__help_commands] )) ||
_wasmer__app__deployment__help_commands() {
    local commands; commands=(
'list:List the volumes of an app' \
'get:Get the volumes of an app' \
'logs:Get logs for an app deployment' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app deployment help commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__help__help_commands] )) ||
_wasmer__app__deployment__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment help help commands' commands "$@"
}
(( $+functions[_wasmer__app__help_commands] )) ||
_wasmer__app__help_commands() {
    local commands; commands=(
'deploy:Deploy an app to Wasmer Edge' \
'create:Create a new Edge app' \
'get:Retrieve detailed informations about an app' \
'info:Show short information about an Edge app' \
'list:List apps belonging to a namespace' \
'logs:Retrieve the logs of an app' \
'purge-cache:Purge caches for applications' \
'delete:Delete an existing Edge app' \
'version:Manage app versions' \
'secret:Manage and reveal secrets related to Edge apps' \
'region:Informations about available Edge regioins' \
'volume:App volume management' \
'deployment:App volume management' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app help commands' commands "$@"
}
(( $+functions[_wasmer__app__help__help_commands] )) ||
_wasmer__app__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help help commands' commands "$@"
}
(( $+functions[_wasmer__app__region__help_commands] )) ||
_wasmer__app__region__help_commands() {
    local commands; commands=(
'list:List available Edge regions' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app region help commands' commands "$@"
}
(( $+functions[_wasmer__app__region__help__help_commands] )) ||
_wasmer__app__region__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app region help help commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help_commands] )) ||
_wasmer__app__secret__help_commands() {
    local commands; commands=(
'create:Create a new app secret' \
'delete:Delete an existing app secret' \
'reveal:Reveal the value of an existing app secret' \
'list:Retrieve the value of an existing app secret' \
'update:Update an existing app secret' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app secret help commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__help_commands] )) ||
_wasmer__app__secret__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help help commands' commands "$@"
}
(( $+functions[_wasmer__app__version__help_commands] )) ||
_wasmer__app__version__help_commands() {
    local commands; commands=(
'get:Show information for a specific app version' \
'list:List versions of an app' \
'activate:Switch the active version of an app. (rollback / rollforward)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app version help commands' commands "$@"
}
(( $+functions[_wasmer__app__version__help__help_commands] )) ||
_wasmer__app__version__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version help help commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__help_commands] )) ||
_wasmer__app__volume__help_commands() {
    local commands; commands=(
'credentials:Retrieve access credentials for the volumes of an app' \
'list:List the volumes of an app' \
'rotate-secrets:Rotate the secrets linked to volumes of an app' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app volume help commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__help__help_commands] )) ||
_wasmer__app__volume__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume help help commands' commands "$@"
}
(( $+functions[_wasmer__auth__help_commands] )) ||
_wasmer__auth__help_commands() {
    local commands; commands=(
'login:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'logout:Subcommand for log in a user into Wasmer (using a browser or provided a token)' \
'whoami:The options for the \`wasmer whoami\` subcommand' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer auth help commands' commands "$@"
}
(( $+functions[_wasmer__auth__help__help_commands] )) ||
_wasmer__auth__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth help help commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__help_commands] )) ||
_wasmer__binfmt__help_commands() {
    local commands; commands=(
'register:Register wasmer as binfmt interpreter' \
'unregister:Unregister a binfmt interpreter for wasm32' \
'reregister:Soft unregister, and register' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer binfmt help commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__help__help_commands] )) ||
_wasmer__binfmt__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt help help commands' commands "$@"
}
(( $+functions[_wasmer__cache__help_commands] )) ||
_wasmer__cache__help_commands() {
    local commands; commands=(
'clean:Clear the cache' \
'dir:Display the location of the cache' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer cache help commands' commands "$@"
}
(( $+functions[_wasmer__cache__help__help_commands] )) ||
_wasmer__cache__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer cache help help commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help_commands] )) ||
_wasmer__config__get__help_commands() {
    local commands; commands=(
'registry.url:Print the registry URL of the currently active registry' \
'registry.token:Print the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Print whether telemetry is currently enabled' \
'update-notifications.enabled:Print whether update notifications are enabled' \
'proxy.url:Print the proxy URL' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config get help commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__help_commands] )) ||
_wasmer__config__get__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help help commands' commands "$@"
}
(( $+functions[_wasmer__config__help_commands] )) ||
_wasmer__config__help_commands() {
    local commands; commands=(
'get:\`wasmer config get \$KEY\`' \
'set:\`wasmer config set \$KEY \$VALUE\`' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config help commands' commands "$@"
}
(( $+functions[_wasmer__config__help__help_commands] )) ||
_wasmer__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help help commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help_commands] )) ||
_wasmer__config__set__help_commands() {
    local commands; commands=(
'registry.url:Set the registry URL of the currently active registry' \
'registry.token:Set the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Set whether telemetry is currently enabled' \
'update-notifications.enabled:Set whether update notifications are enabled' \
'proxy.url:Set the active proxy URL' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config set help commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__help_commands] )) ||
_wasmer__config__set__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help help commands' commands "$@"
}
(( $+functions[_wasmer__container__help_commands] )) ||
_wasmer__container__help_commands() {
    local commands; commands=(
'unpack:RENAMED\: the '\''container unpack'\'' command has been renamed to '\''package unpack'\''!' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer container help commands' commands "$@"
}
(( $+functions[_wasmer__container__help__help_commands] )) ||
_wasmer__container__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer container help help commands' commands "$@"
}
(( $+functions[_wasmer__domain__help_commands] )) ||
_wasmer__domain__help_commands() {
    local commands; commands=(
'list:List domains' \
'get:Get a domain' \
'get-zone-file:Get zone file for a domain' \
'sync-zone-file:Sync local zone file with remotex' \
'register:Register new domain' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer domain help commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__help_commands] )) ||
_wasmer__domain__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help help commands' commands "$@"
}
(( $+functions[_wasmer__help_commands] )) ||
_wasmer__help_commands() {
    local commands; commands=(
'login:Login into a wasmer.io-like registry' \
'auth:Manage your ' \
'publish:Publish a package to a registry \[alias\: package publish\]' \
'cache:Manage the local Wasmer cache' \
'validate:Validate a WebAssembly binary' \
'compile:Compile a WebAssembly binary' \
'create-exe:Compile a WebAssembly binary into a native executable' \
'create-obj:Compile a WebAssembly binary into an object file' \
'gen-c-header:Generate the C static_defs.h header file for the input .wasm module' \
'config:Get various configuration information needed to compile programs which use Wasmer' \
'self-update:Update wasmer to the latest version' \
'inspect:Inspect a WebAssembly file' \
'init:Initializes a new wasmer.toml file' \
'wast:Run spec testsuite' \
'binfmt:Unregister and/or register wasmer as binfmt interpreter' \
'whoami:Shows the current logged in user for the current active registry' \
'add:Add a Wasmer package'\''s bindings to your application' \
'run:Run a WebAssembly file or Wasmer container' \
'journal:Manage journals (compacting, inspecting, filtering, ...)' \
'package:Package related commands' \
'container:Container related commands. (inspecting, unpacking, ...)' \
'deploy:Deploy apps to Wasmer Edge \[alias\: app deploy\]' \
'app:Create and manage Wasmer Edge apps' \
'ssh:Run commands/packages on Wasmer Edge in an interactive shell session' \
'namespace:Manage Wasmer namespaces' \
'domain:Manage DNS records' \
'gen-completions:Generate autocompletion for different shells' \
'gen-man:Generate man pages' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer help commands' commands "$@"
}
(( $+functions[_wasmer__help__help_commands] )) ||
_wasmer__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help help commands' commands "$@"
}
(( $+functions[_wasmer__journal__extract__help_commands] )) ||
_wasmer__journal__extract__help_commands() {
    local commands; commands=(
'memory:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer journal extract help commands' commands "$@"
}
(( $+functions[_wasmer__journal__extract__help__help_commands] )) ||
_wasmer__journal__extract__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal extract help help commands' commands "$@"
}
(( $+functions[_wasmer__journal__help_commands] )) ||
_wasmer__journal__help_commands() {
    local commands; commands=(
'compact:Compacts a journal into a smaller size by removed redundant or duplicate events' \
'export:Exports the contents of a journal to stdout as JSON objects' \
'import:Imports the events into a journal as JSON objects' \
'inspect:Inspects the contents of a journal and summarizes it to \`stdout\`' \
'filter:Filters out certain events from a journal' \
'extract:Extracts an element of a journal' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer journal help commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__help_commands] )) ||
_wasmer__journal__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help help commands' commands "$@"
}
(( $+functions[_wasmer__namespace__help_commands] )) ||
_wasmer__namespace__help_commands() {
    local commands; commands=(
'get:Show a namespace' \
'list:List namespaces' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer namespace help commands' commands "$@"
}
(( $+functions[_wasmer__namespace__help__help_commands] )) ||
_wasmer__namespace__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer namespace help help commands' commands "$@"
}
(( $+functions[_wasmer__package__help_commands] )) ||
_wasmer__package__help_commands() {
    local commands; commands=(
'download:Download a package from the registry' \
'build:Build a container from a package manifest' \
'tag:Tag an existing package' \
'push:Push a package to the registry' \
'publish:Publish (push and tag) a package to the registry' \
'unpack:Extract contents of a webc image to a directory' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer package help commands' commands "$@"
}
(( $+functions[_wasmer__package__help__help_commands] )) ||
_wasmer__package__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help help commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__import_commands] )) ||
_wasmer__help__journal__import_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal import commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__import_commands] )) ||
_wasmer__journal__help__import_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help import commands' commands "$@"
}
(( $+functions[_wasmer__journal__import_commands] )) ||
_wasmer__journal__import_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal import commands' commands "$@"
}
(( $+functions[_wasmer__app__help__info_commands] )) ||
_wasmer__app__help__info_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help info commands' commands "$@"
}
(( $+functions[_wasmer__app__info_commands] )) ||
_wasmer__app__info_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app info commands' commands "$@"
}
(( $+functions[_wasmer__help__app__info_commands] )) ||
_wasmer__help__app__info_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app info commands' commands "$@"
}
(( $+functions[_wasmer__help__init_commands] )) ||
_wasmer__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help init commands' commands "$@"
}
(( $+functions[_wasmer__init_commands] )) ||
_wasmer__init_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer init commands' commands "$@"
}
(( $+functions[_wasmer__help__inspect_commands] )) ||
_wasmer__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help inspect commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__inspect_commands] )) ||
_wasmer__help__journal__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal inspect commands' commands "$@"
}
(( $+functions[_wasmer__inspect_commands] )) ||
_wasmer__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer inspect commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__inspect_commands] )) ||
_wasmer__journal__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help inspect commands' commands "$@"
}
(( $+functions[_wasmer__journal__inspect_commands] )) ||
_wasmer__journal__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal inspect commands' commands "$@"
}
(( $+functions[_wasmer__help__journal_commands] )) ||
_wasmer__help__journal_commands() {
    local commands; commands=(
'compact:Compacts a journal into a smaller size by removed redundant or duplicate events' \
'export:Exports the contents of a journal to stdout as JSON objects' \
'import:Imports the events into a journal as JSON objects' \
'inspect:Inspects the contents of a journal and summarizes it to \`stdout\`' \
'filter:Filters out certain events from a journal' \
'extract:Extracts an element of a journal' \
    )
    _describe -t commands 'wasmer help journal commands' commands "$@"
}
(( $+functions[_wasmer__journal_commands] )) ||
_wasmer__journal_commands() {
    local commands; commands=(
'compact:Compacts a journal into a smaller size by removed redundant or duplicate events' \
'export:Exports the contents of a journal to stdout as JSON objects' \
'import:Imports the events into a journal as JSON objects' \
'inspect:Inspects the contents of a journal and summarizes it to \`stdout\`' \
'filter:Filters out certain events from a journal' \
'extract:Extracts an element of a journal' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer journal commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__help__list_commands] )) ||
_wasmer__app__deployment__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment help list commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__list_commands] )) ||
_wasmer__app__deployment__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__deployment__list_commands] )) ||
_wasmer__app__help__deployment__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help deployment list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__list_commands] )) ||
_wasmer__app__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__region__list_commands] )) ||
_wasmer__app__help__region__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help region list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret__list_commands] )) ||
_wasmer__app__help__secret__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help secret list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__version__list_commands] )) ||
_wasmer__app__help__version__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help version list commands' commands "$@"
}
(( $+functions[_wasmer__app__help__volume__list_commands] )) ||
_wasmer__app__help__volume__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help volume list commands' commands "$@"
}
(( $+functions[_wasmer__app__list_commands] )) ||
_wasmer__app__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app list commands' commands "$@"
}
(( $+functions[_wasmer__app__region__help__list_commands] )) ||
_wasmer__app__region__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app region help list commands' commands "$@"
}
(( $+functions[_wasmer__app__region__list_commands] )) ||
_wasmer__app__region__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app region list commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__list_commands] )) ||
_wasmer__app__secret__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help list commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__list_commands] )) ||
_wasmer__app__secret__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret list commands' commands "$@"
}
(( $+functions[_wasmer__app__version__help__list_commands] )) ||
_wasmer__app__version__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version help list commands' commands "$@"
}
(( $+functions[_wasmer__app__version__list_commands] )) ||
_wasmer__app__version__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app version list commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__help__list_commands] )) ||
_wasmer__app__volume__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume help list commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__list_commands] )) ||
_wasmer__app__volume__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume list commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__list_commands] )) ||
_wasmer__domain__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help list commands' commands "$@"
}
(( $+functions[_wasmer__domain__list_commands] )) ||
_wasmer__domain__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__deployment__list_commands] )) ||
_wasmer__help__app__deployment__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app deployment list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__list_commands] )) ||
_wasmer__help__app__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__region__list_commands] )) ||
_wasmer__help__app__region__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app region list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret__list_commands] )) ||
_wasmer__help__app__secret__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app secret list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__version__list_commands] )) ||
_wasmer__help__app__version__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app version list commands' commands "$@"
}
(( $+functions[_wasmer__help__app__volume__list_commands] )) ||
_wasmer__help__app__volume__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app volume list commands' commands "$@"
}
(( $+functions[_wasmer__help__domain__list_commands] )) ||
_wasmer__help__domain__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help domain list commands' commands "$@"
}
(( $+functions[_wasmer__help__namespace__list_commands] )) ||
_wasmer__help__namespace__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help namespace list commands' commands "$@"
}
(( $+functions[_wasmer__namespace__help__list_commands] )) ||
_wasmer__namespace__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer namespace help list commands' commands "$@"
}
(( $+functions[_wasmer__namespace__list_commands] )) ||
_wasmer__namespace__list_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer namespace list commands' commands "$@"
}
(( $+functions[_wasmer__auth__help__login_commands] )) ||
_wasmer__auth__help__login_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth help login commands' commands "$@"
}
(( $+functions[_wasmer__auth__login_commands] )) ||
_wasmer__auth__login_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth login commands' commands "$@"
}
(( $+functions[_wasmer__help__auth__login_commands] )) ||
_wasmer__help__auth__login_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help auth login commands' commands "$@"
}
(( $+functions[_wasmer__help__login_commands] )) ||
_wasmer__help__login_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help login commands' commands "$@"
}
(( $+functions[_wasmer__login_commands] )) ||
_wasmer__login_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer login commands' commands "$@"
}
(( $+functions[_wasmer__auth__help__logout_commands] )) ||
_wasmer__auth__help__logout_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth help logout commands' commands "$@"
}
(( $+functions[_wasmer__auth__logout_commands] )) ||
_wasmer__auth__logout_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth logout commands' commands "$@"
}
(( $+functions[_wasmer__help__auth__logout_commands] )) ||
_wasmer__help__auth__logout_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help auth logout commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__help__logs_commands] )) ||
_wasmer__app__deployment__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment help logs commands' commands "$@"
}
(( $+functions[_wasmer__app__deployment__logs_commands] )) ||
_wasmer__app__deployment__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app deployment logs commands' commands "$@"
}
(( $+functions[_wasmer__app__help__deployment__logs_commands] )) ||
_wasmer__app__help__deployment__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help deployment logs commands' commands "$@"
}
(( $+functions[_wasmer__app__help__logs_commands] )) ||
_wasmer__app__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help logs commands' commands "$@"
}
(( $+functions[_wasmer__app__logs_commands] )) ||
_wasmer__app__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app logs commands' commands "$@"
}
(( $+functions[_wasmer__help__app__deployment__logs_commands] )) ||
_wasmer__help__app__deployment__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app deployment logs commands' commands "$@"
}
(( $+functions[_wasmer__help__app__logs_commands] )) ||
_wasmer__help__app__logs_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app logs commands' commands "$@"
}
(( $+functions[_wasmer__help__journal__extract__memory_commands] )) ||
_wasmer__help__journal__extract__memory_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help journal extract memory commands' commands "$@"
}
(( $+functions[_wasmer__journal__extract__help__memory_commands] )) ||
_wasmer__journal__extract__help__memory_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal extract help memory commands' commands "$@"
}
(( $+functions[_wasmer__journal__extract__memory_commands] )) ||
_wasmer__journal__extract__memory_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal extract memory commands' commands "$@"
}
(( $+functions[_wasmer__journal__help__extract__memory_commands] )) ||
_wasmer__journal__help__extract__memory_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer journal help extract memory commands' commands "$@"
}
(( $+functions[_wasmer__help__namespace_commands] )) ||
_wasmer__help__namespace_commands() {
    local commands; commands=(
'get:Show a namespace' \
'list:List namespaces' \
    )
    _describe -t commands 'wasmer help namespace commands' commands "$@"
}
(( $+functions[_wasmer__namespace_commands] )) ||
_wasmer__namespace_commands() {
    local commands; commands=(
'get:Show a namespace' \
'list:List namespaces' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer namespace commands' commands "$@"
}
(( $+functions[_wasmer__help__package_commands] )) ||
_wasmer__help__package_commands() {
    local commands; commands=(
'download:Download a package from the registry' \
'build:Build a container from a package manifest' \
'tag:Tag an existing package' \
'push:Push a package to the registry' \
'publish:Publish (push and tag) a package to the registry' \
'unpack:Extract contents of a webc image to a directory' \
    )
    _describe -t commands 'wasmer help package commands' commands "$@"
}
(( $+functions[_wasmer__package_commands] )) ||
_wasmer__package_commands() {
    local commands; commands=(
'download:Download a package from the registry' \
'build:Build a container from a package manifest' \
'tag:Tag an existing package' \
'push:Push a package to the registry' \
'publish:Publish (push and tag) a package to the registry' \
'unpack:Extract contents of a webc image to a directory' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer package commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__proxy.url_commands] )) ||
_wasmer__config__get__help__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__config__get__proxy.url_commands] )) ||
_wasmer__config__get__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get__proxy.url_commands] )) ||
_wasmer__config__help__get__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help get proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set__proxy.url_commands] )) ||
_wasmer__config__help__set__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help set proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__proxy.url_commands] )) ||
_wasmer__config__set__help__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__config__set__proxy.url_commands] )) ||
_wasmer__config__set__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get__proxy.url_commands] )) ||
_wasmer__help__config__get__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config get proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set__proxy.url_commands] )) ||
_wasmer__help__config__set__proxy.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config set proxy.url commands' commands "$@"
}
(( $+functions[_wasmer__help__package__publish_commands] )) ||
_wasmer__help__package__publish_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package publish commands' commands "$@"
}
(( $+functions[_wasmer__help__publish_commands] )) ||
_wasmer__help__publish_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help publish commands' commands "$@"
}
(( $+functions[_wasmer__package__help__publish_commands] )) ||
_wasmer__package__help__publish_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help publish commands' commands "$@"
}
(( $+functions[_wasmer__package__publish_commands] )) ||
_wasmer__package__publish_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package publish commands' commands "$@"
}
(( $+functions[_wasmer__publish_commands] )) ||
_wasmer__publish_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer publish commands' commands "$@"
}
(( $+functions[_wasmer__app__help__purge-cache_commands] )) ||
_wasmer__app__help__purge-cache_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help purge-cache commands' commands "$@"
}
(( $+functions[_wasmer__app__purge-cache_commands] )) ||
_wasmer__app__purge-cache_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app purge-cache commands' commands "$@"
}
(( $+functions[_wasmer__help__app__purge-cache_commands] )) ||
_wasmer__help__app__purge-cache_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app purge-cache commands' commands "$@"
}
(( $+functions[_wasmer__help__package__push_commands] )) ||
_wasmer__help__package__push_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package push commands' commands "$@"
}
(( $+functions[_wasmer__package__help__push_commands] )) ||
_wasmer__package__help__push_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help push commands' commands "$@"
}
(( $+functions[_wasmer__package__push_commands] )) ||
_wasmer__package__push_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package push commands' commands "$@"
}
(( $+functions[_wasmer__app__help__region_commands] )) ||
_wasmer__app__help__region_commands() {
    local commands; commands=(
'list:List available Edge regions' \
    )
    _describe -t commands 'wasmer app help region commands' commands "$@"
}
(( $+functions[_wasmer__app__region_commands] )) ||
_wasmer__app__region_commands() {
    local commands; commands=(
'list:List available Edge regions' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app region commands' commands "$@"
}
(( $+functions[_wasmer__help__app__region_commands] )) ||
_wasmer__help__app__region_commands() {
    local commands; commands=(
'list:List available Edge regions' \
    )
    _describe -t commands 'wasmer help app region commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__help__register_commands] )) ||
_wasmer__binfmt__help__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt help register commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__register_commands] )) ||
_wasmer__binfmt__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt register commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__register_commands] )) ||
_wasmer__domain__help__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help register commands' commands "$@"
}
(( $+functions[_wasmer__domain__register_commands] )) ||
_wasmer__domain__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain register commands' commands "$@"
}
(( $+functions[_wasmer__help__binfmt__register_commands] )) ||
_wasmer__help__binfmt__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help binfmt register commands' commands "$@"
}
(( $+functions[_wasmer__help__domain__register_commands] )) ||
_wasmer__help__domain__register_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help domain register commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__registry.token_commands] )) ||
_wasmer__config__get__help__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__get__registry.token_commands] )) ||
_wasmer__config__get__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get__registry.token_commands] )) ||
_wasmer__config__help__get__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help get registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set__registry.token_commands] )) ||
_wasmer__config__help__set__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help set registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__registry.token_commands] )) ||
_wasmer__config__set__help__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__set__registry.token_commands] )) ||
_wasmer__config__set__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set registry.token commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get__registry.token_commands] )) ||
_wasmer__help__config__get__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config get registry.token commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set__registry.token_commands] )) ||
_wasmer__help__config__set__registry.token_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config set registry.token commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__registry.url_commands] )) ||
_wasmer__config__get__help__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help registry.url commands' commands "$@"
}
(( $+functions[_wasmer__config__get__registry.url_commands] )) ||
_wasmer__config__get__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get registry.url commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get__registry.url_commands] )) ||
_wasmer__config__help__get__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help get registry.url commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set__registry.url_commands] )) ||
_wasmer__config__help__set__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help set registry.url commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__registry.url_commands] )) ||
_wasmer__config__set__help__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help registry.url commands' commands "$@"
}
(( $+functions[_wasmer__config__set__registry.url_commands] )) ||
_wasmer__config__set__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set registry.url commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get__registry.url_commands] )) ||
_wasmer__help__config__get__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config get registry.url commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set__registry.url_commands] )) ||
_wasmer__help__config__set__registry.url_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config set registry.url commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__help__reregister_commands] )) ||
_wasmer__binfmt__help__reregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt help reregister commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__reregister_commands] )) ||
_wasmer__binfmt__reregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt reregister commands' commands "$@"
}
(( $+functions[_wasmer__help__binfmt__reregister_commands] )) ||
_wasmer__help__binfmt__reregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help binfmt reregister commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret__reveal_commands] )) ||
_wasmer__app__help__secret__reveal_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help secret reveal commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__reveal_commands] )) ||
_wasmer__app__secret__help__reveal_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help reveal commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__reveal_commands] )) ||
_wasmer__app__secret__reveal_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret reveal commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret__reveal_commands] )) ||
_wasmer__help__app__secret__reveal_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app secret reveal commands' commands "$@"
}
(( $+functions[_wasmer__app__help__volume__rotate-secrets_commands] )) ||
_wasmer__app__help__volume__rotate-secrets_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help volume rotate-secrets commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__help__rotate-secrets_commands] )) ||
_wasmer__app__volume__help__rotate-secrets_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume help rotate-secrets commands' commands "$@"
}
(( $+functions[_wasmer__app__volume__rotate-secrets_commands] )) ||
_wasmer__app__volume__rotate-secrets_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app volume rotate-secrets commands' commands "$@"
}
(( $+functions[_wasmer__help__app__volume__rotate-secrets_commands] )) ||
_wasmer__help__app__volume__rotate-secrets_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app volume rotate-secrets commands' commands "$@"
}
(( $+functions[_wasmer__help__run_commands] )) ||
_wasmer__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help run commands' commands "$@"
}
(( $+functions[_wasmer__run_commands] )) ||
_wasmer__run_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer run commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret_commands] )) ||
_wasmer__app__help__secret_commands() {
    local commands; commands=(
'create:Create a new app secret' \
'delete:Delete an existing app secret' \
'reveal:Reveal the value of an existing app secret' \
'list:Retrieve the value of an existing app secret' \
'update:Update an existing app secret' \
    )
    _describe -t commands 'wasmer app help secret commands' commands "$@"
}
(( $+functions[_wasmer__app__secret_commands] )) ||
_wasmer__app__secret_commands() {
    local commands; commands=(
'create:Create a new app secret' \
'delete:Delete an existing app secret' \
'reveal:Reveal the value of an existing app secret' \
'list:Retrieve the value of an existing app secret' \
'update:Update an existing app secret' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app secret commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret_commands] )) ||
_wasmer__help__app__secret_commands() {
    local commands; commands=(
'create:Create a new app secret' \
'delete:Delete an existing app secret' \
'reveal:Reveal the value of an existing app secret' \
'list:Retrieve the value of an existing app secret' \
'update:Update an existing app secret' \
    )
    _describe -t commands 'wasmer help app secret commands' commands "$@"
}
(( $+functions[_wasmer__help__self-update_commands] )) ||
_wasmer__help__self-update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help self-update commands' commands "$@"
}
(( $+functions[_wasmer__self-update_commands] )) ||
_wasmer__self-update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer self-update commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set_commands] )) ||
_wasmer__config__help__set_commands() {
    local commands; commands=(
'registry.url:Set the registry URL of the currently active registry' \
'registry.token:Set the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Set whether telemetry is currently enabled' \
'update-notifications.enabled:Set whether update notifications are enabled' \
'proxy.url:Set the active proxy URL' \
    )
    _describe -t commands 'wasmer config help set commands' commands "$@"
}
(( $+functions[_wasmer__config__set_commands] )) ||
_wasmer__config__set_commands() {
    local commands; commands=(
'registry.url:Set the registry URL of the currently active registry' \
'registry.token:Set the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Set whether telemetry is currently enabled' \
'update-notifications.enabled:Set whether update notifications are enabled' \
'proxy.url:Set the active proxy URL' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer config set commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set_commands] )) ||
_wasmer__help__config__set_commands() {
    local commands; commands=(
'registry.url:Set the registry URL of the currently active registry' \
'registry.token:Set the token for the currently active registry or nothing if not logged in' \
'telemetry.enabled:Set whether telemetry is currently enabled' \
'update-notifications.enabled:Set whether update notifications are enabled' \
'proxy.url:Set the active proxy URL' \
    )
    _describe -t commands 'wasmer help config set commands' commands "$@"
}
(( $+functions[_wasmer__help__ssh_commands] )) ||
_wasmer__help__ssh_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help ssh commands' commands "$@"
}
(( $+functions[_wasmer__ssh_commands] )) ||
_wasmer__ssh_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer ssh commands' commands "$@"
}
(( $+functions[_wasmer__domain__help__sync-zone-file_commands] )) ||
_wasmer__domain__help__sync-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain help sync-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__domain__sync-zone-file_commands] )) ||
_wasmer__domain__sync-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer domain sync-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__help__domain__sync-zone-file_commands] )) ||
_wasmer__help__domain__sync-zone-file_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help domain sync-zone-file commands' commands "$@"
}
(( $+functions[_wasmer__help__package__tag_commands] )) ||
_wasmer__help__package__tag_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package tag commands' commands "$@"
}
(( $+functions[_wasmer__package__help__tag_commands] )) ||
_wasmer__package__help__tag_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help tag commands' commands "$@"
}
(( $+functions[_wasmer__package__tag_commands] )) ||
_wasmer__package__tag_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package tag commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__telemetry.enabled_commands] )) ||
_wasmer__config__get__help__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__get__telemetry.enabled_commands] )) ||
_wasmer__config__get__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get__telemetry.enabled_commands] )) ||
_wasmer__config__help__get__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help get telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set__telemetry.enabled_commands] )) ||
_wasmer__config__help__set__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help set telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__telemetry.enabled_commands] )) ||
_wasmer__config__set__help__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__set__telemetry.enabled_commands] )) ||
_wasmer__config__set__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get__telemetry.enabled_commands] )) ||
_wasmer__help__config__get__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config get telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set__telemetry.enabled_commands] )) ||
_wasmer__help__config__set__telemetry.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config set telemetry.enabled commands' commands "$@"
}
(( $+functions[_wasmer__container__help__unpack_commands] )) ||
_wasmer__container__help__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer container help unpack commands' commands "$@"
}
(( $+functions[_wasmer__container__unpack_commands] )) ||
_wasmer__container__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer container unpack commands' commands "$@"
}
(( $+functions[_wasmer__help__container__unpack_commands] )) ||
_wasmer__help__container__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help container unpack commands' commands "$@"
}
(( $+functions[_wasmer__help__package__unpack_commands] )) ||
_wasmer__help__package__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help package unpack commands' commands "$@"
}
(( $+functions[_wasmer__package__help__unpack_commands] )) ||
_wasmer__package__help__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package help unpack commands' commands "$@"
}
(( $+functions[_wasmer__package__unpack_commands] )) ||
_wasmer__package__unpack_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer package unpack commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__help__unregister_commands] )) ||
_wasmer__binfmt__help__unregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt help unregister commands' commands "$@"
}
(( $+functions[_wasmer__binfmt__unregister_commands] )) ||
_wasmer__binfmt__unregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer binfmt unregister commands' commands "$@"
}
(( $+functions[_wasmer__help__binfmt__unregister_commands] )) ||
_wasmer__help__binfmt__unregister_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help binfmt unregister commands' commands "$@"
}
(( $+functions[_wasmer__app__help__secret__update_commands] )) ||
_wasmer__app__help__secret__update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app help secret update commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__help__update_commands] )) ||
_wasmer__app__secret__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret help update commands' commands "$@"
}
(( $+functions[_wasmer__app__secret__update_commands] )) ||
_wasmer__app__secret__update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer app secret update commands' commands "$@"
}
(( $+functions[_wasmer__help__app__secret__update_commands] )) ||
_wasmer__help__app__secret__update_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help app secret update commands' commands "$@"
}
(( $+functions[_wasmer__config__get__help__update-notifications.enabled_commands] )) ||
_wasmer__config__get__help__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get help update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__get__update-notifications.enabled_commands] )) ||
_wasmer__config__get__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config get update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__help__get__update-notifications.enabled_commands] )) ||
_wasmer__config__help__get__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help get update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__help__set__update-notifications.enabled_commands] )) ||
_wasmer__config__help__set__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config help set update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__set__help__update-notifications.enabled_commands] )) ||
_wasmer__config__set__help__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set help update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__config__set__update-notifications.enabled_commands] )) ||
_wasmer__config__set__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer config set update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__help__config__get__update-notifications.enabled_commands] )) ||
_wasmer__help__config__get__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config get update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__help__config__set__update-notifications.enabled_commands] )) ||
_wasmer__help__config__set__update-notifications.enabled_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help config set update-notifications.enabled commands' commands "$@"
}
(( $+functions[_wasmer__help__validate_commands] )) ||
_wasmer__help__validate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help validate commands' commands "$@"
}
(( $+functions[_wasmer__validate_commands] )) ||
_wasmer__validate_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer validate commands' commands "$@"
}
(( $+functions[_wasmer__app__help__version_commands] )) ||
_wasmer__app__help__version_commands() {
    local commands; commands=(
'get:Show information for a specific app version' \
'list:List versions of an app' \
'activate:Switch the active version of an app. (rollback / rollforward)' \
    )
    _describe -t commands 'wasmer app help version commands' commands "$@"
}
(( $+functions[_wasmer__app__version_commands] )) ||
_wasmer__app__version_commands() {
    local commands; commands=(
'get:Show information for a specific app version' \
'list:List versions of an app' \
'activate:Switch the active version of an app. (rollback / rollforward)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app version commands' commands "$@"
}
(( $+functions[_wasmer__help__app__version_commands] )) ||
_wasmer__help__app__version_commands() {
    local commands; commands=(
'get:Show information for a specific app version' \
'list:List versions of an app' \
'activate:Switch the active version of an app. (rollback / rollforward)' \
    )
    _describe -t commands 'wasmer help app version commands' commands "$@"
}
(( $+functions[_wasmer__app__help__volume_commands] )) ||
_wasmer__app__help__volume_commands() {
    local commands; commands=(
'credentials:Retrieve access credentials for the volumes of an app' \
'list:List the volumes of an app' \
'rotate-secrets:Rotate the secrets linked to volumes of an app' \
    )
    _describe -t commands 'wasmer app help volume commands' commands "$@"
}
(( $+functions[_wasmer__app__volume_commands] )) ||
_wasmer__app__volume_commands() {
    local commands; commands=(
'credentials:Retrieve access credentials for the volumes of an app' \
'list:List the volumes of an app' \
'rotate-secrets:Rotate the secrets linked to volumes of an app' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wasmer app volume commands' commands "$@"
}
(( $+functions[_wasmer__help__app__volume_commands] )) ||
_wasmer__help__app__volume_commands() {
    local commands; commands=(
'credentials:Retrieve access credentials for the volumes of an app' \
'list:List the volumes of an app' \
'rotate-secrets:Rotate the secrets linked to volumes of an app' \
    )
    _describe -t commands 'wasmer help app volume commands' commands "$@"
}
(( $+functions[_wasmer__help__wast_commands] )) ||
_wasmer__help__wast_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help wast commands' commands "$@"
}
(( $+functions[_wasmer__wast_commands] )) ||
_wasmer__wast_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer wast commands' commands "$@"
}
(( $+functions[_wasmer__auth__help__whoami_commands] )) ||
_wasmer__auth__help__whoami_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth help whoami commands' commands "$@"
}
(( $+functions[_wasmer__auth__whoami_commands] )) ||
_wasmer__auth__whoami_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer auth whoami commands' commands "$@"
}
(( $+functions[_wasmer__help__auth__whoami_commands] )) ||
_wasmer__help__auth__whoami_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help auth whoami commands' commands "$@"
}
(( $+functions[_wasmer__help__whoami_commands] )) ||
_wasmer__help__whoami_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer help whoami commands' commands "$@"
}
(( $+functions[_wasmer__whoami_commands] )) ||
_wasmer__whoami_commands() {
    local commands; commands=()
    _describe -t commands 'wasmer whoami commands' commands "$@"
}

if [ "$funcstack[1]" = "_wasmer" ]; then
    _wasmer "$@"
else
    compdef _wasmer wasmer
fi
