# vim:syntax=zsh
# vim:filetype=zsh

# precedence is left to right, so paths on the left have higher priority

#
# Editors
#

export EDITOR='vim'
export VISUAL='vim'
export PAGER='less'

#
# Language
#

if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
  export LC_ALL=$LANG
fi

#
# Paths
#

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

# Set the list of directories that cd searches.
# cdpath=(
#   $cdpath
# )

# Set the list of directories that Zsh searches for programs.
path=(
  $HOME/bin2
  $HOME/dotfiles/bin
  /opt/local/{bin,sbin}
  /usr/local/{bin,sbin}
  $path
)

#
# Less
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS="-g -i -M -R -S -w -z-4"

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

# setting sort order preference
if [[ "$(uname -s)" == 'Linux' ]]; then
  export LC_COLLATE=en_US.utf8
fi

# pyenv
# fix: https://github.com/pyenv/pyenv/issues/1906
if [[ -d $HOME/.pyenv ]]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv virtualenv-init -)"
  fi
fi

# java (jenv)
if [[ -d $HOME/.jenv ]]; then
  export PATH="$HOME/.jenv/bin:$PATH"
  eval "$(jenv init -)"
fi

# maven
export PATH="$HOME/bin2/maven/bin:$PATH"

# golang
# look for goenv first
if [[ -d $HOME/.goenv ]]; then
  export GOENV_ROOT="$HOME/.goenv"
  export PATH="$GOENV_ROOT/bin:$PATH"
  eval "$(goenv init -)"
  # make goenv manage GOPATH and GOROOT, too
  export PATH="$GOROOT/bin:$PATH"
  export PATH="$PATH:$GOPATH/bin"
# then look for system install
elif [[ -d /usr/local/go/bin ]]; then
  export PATH="/usr/local/go/bin:$PATH"
  export GOPATH="$HOME/.golang"
  export PATH="$GOPATH/bin:$PATH"
# then for custom userspace install
elif [[ -d $HOME/bin2/go/bin ]]; then
  export PATH="$HOME/bin2/go/bin:$PATH"
  export GOPATH="$HOME/.golang"
  export PATH="$GOPATH/bin:$PATH"
fi

# swift
# on macOS it is part of Xcode
if [[ "$(uname -s)" == 'Linux' ]] && [[ -d /opt/swift/usr/bin ]]; then
export PATH=/opt/swift/usr/bin:$PATH
fi

# node.js
if [[ -d "$HOME/.nvm" ]]; then
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# rust
if [[ -d "$HOME/.cargo/bin" ]]; then
export PATH="$HOME/.cargo/bin:$PATH"
fi

# krew
if [ -d "${KREW_ROOT:-$HOME/.krew}/bin" ]; then
  export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

## WebAssembly -- start

# wasmer
export WASMER_DIR="$HOME/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

# wasmtime
if [[ -d "$HOME/.wasmtime" ]]; then
  export WASMTIME_HOME="$HOME/.wasmtime"
  export PATH="$WASMTIME_HOME/bin:$PATH"
fi

## WebAssembly -- end

# deno.land
if [[ -d "$HOME/.deno" ]]; then
  export DENO_INSTALL="$HOME/.deno"
  export PATH="$DENO_INSTALL/bin:$PATH"
fi

# terraform (tfenv)
export PATH="$HOME/.tfenv/bin:$PATH"

# ruby
# for install as user
if [[ -d "$HOME/.rvm" ]]; then
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
# for installs as root (docker?)
elif [[ -s "/usr/local/rvm/scripts/rvm" ]]; then
  source /usr/local/rvm/scripts/rvm
fi
